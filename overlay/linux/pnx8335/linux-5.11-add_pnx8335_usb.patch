diff -Naur linux-5.11.orig/drivers/usb/host/ehci-hcd.c linux-5.11/drivers/usb/host/ehci-hcd.c
--- linux-5.11.orig/drivers/usb/host/ehci-hcd.c	2021-02-15 01:32:24.000000000 +0300
+++ linux-5.11/drivers/usb/host/ehci-hcd.c	2021-02-19 09:24:25.706745217 +0300
@@ -25,6 +25,7 @@
 #include <linux/usb/otg.h>
 #include <linux/moduleparam.h>
 #include <linux/dma-mapping.h>
+#include <linux/platform_device.h>
 #include <linux/debugfs.h>
 #include <linux/slab.h>
 
@@ -223,13 +224,17 @@
 	ehci_writel(ehci, tmp, &ehci->regs->usbmode);
 }
 
+#ifdef CONFIG_USB_EHCI_PNX833X
+static int usb_hcd_pnx833x_make_hc(struct usb_hcd *hcd);
+#endif
+
 /*
  * Reset a non-running (STS_HALT == 1) controller.
  * Must be called with interrupts enabled and the lock not held.
  */
 int ehci_reset(struct ehci_hcd *ehci)
 {
-	int	retval;
+	int	retval, retval2;
 	u32	command = ehci_readl(ehci, &ehci->regs->command);
 
 	/* If the EHCI debug controller is active, special care must be
@@ -244,7 +249,12 @@
 	ehci->next_statechange = jiffies;
 	retval = ehci_handshake(ehci, &ehci->regs->command,
 			    CMD_RESET, 0, 250 * 1000);
-
+#ifdef CONFIG_USB_EHCI_PNX833X
+	/* CMD_RESET makes pnx833x USB hardware to forget that is was in HC mode */
+	retval2 = usb_hcd_pnx833x_make_hc(ehci_to_hcd(ehci));
+	if (!retval)
+		retval = retval2;
+#endif
 	if (ehci->has_hostpc) {
 		ehci_writel(ehci, USBMODE_EX_HC | USBMODE_EX_VBPS,
 				&ehci->regs->usbmode_ex);
@@ -460,6 +470,10 @@
 
 	spin_lock_init(&ehci->lock);
 
+#ifdef CONFIG_USB_EHCI_PNX833X
+	if (hcd->self.controller->bus == &platform_bus_type)
+		ehci->sbrn = 0x20;      /* just for better output */
+#endif
 	/*
 	 * keep io watchdog by default, those good HCDs could turn off it later
 	 */
@@ -1299,6 +1313,11 @@
 #define PLATFORM_DRIVER		ehci_grlib_driver
 #endif
 
+#ifdef CONFIG_USB_EHCI_PNX833X
+#include "ehci-pnx833x.c"
+#define PLATFORM_DRIVER		ehci_hcd_pnx833x_driver
+#endif
+
 static int __init ehci_hcd_init(void)
 {
 	int retval = 0;
diff -Naur linux-5.11.orig/drivers/usb/host/ehci-pnx833x.c linux-5.11/drivers/usb/host/ehci-pnx833x.c
--- linux-5.11.orig/drivers/usb/host/ehci-pnx833x.c	1970-01-01 03:00:00.000000000 +0300
+++ linux-5.11/drivers/usb/host/ehci-pnx833x.c	2021-02-19 09:24:25.706745217 +0300
@@ -0,0 +1,249 @@
+/*
+ * EHCI HCD (Host Controller Driver) for USB.
+ *
+ * (C) Copyright 2006 Chris Steel <chris.steel@nxp.com>
+ *
+ * Bus Glue for NXP PNX833x
+ *
+ *
+ * This file is licenced under the GPL.
+ */
+
+#include <linux/platform_device.h>
+#include <asm/mach-pnx833x/pnx833x.h>
+
+
+extern int usb_disabled(void);
+
+/*-------------------------------------------------------------------------*/
+static int usb_hcd_pnx833x_make_hc(struct usb_hcd *hcd)
+{
+	u32 *reg, val;
+       
+	reg = (u32 *)((char *)(hcd->regs) + 0xa8);
+	val = readl(reg);
+
+	if ((val & 3) != 3 && (val & 3) != 0) {
+		printk("usb_hcd_pnx833x_make_hc(): unsane hardware state\n");
+		return -EIO;
+	}
+
+	val |= 3;
+	*reg = val;
+	
+	return 0;
+}
+
+static void pnx833x_start_ehc(struct platform_device *dev)
+{
+	pr_debug(__FILE__ ": starting PNX833x EHCI USB Controller\n");
+	PNX833X_CONFIG_USB = 0x0AA2;
+}
+
+static void pnx833x_stop_ehc(struct platform_device *dev)
+{
+	pr_debug(__FILE__ ": stopping PNX833x EHCI USB Controller\n");
+
+}
+
+#ifdef CONFIG_PM
+
+static int ehci_pnx833x_bus_suspend(struct usb_hcd *hcd)
+{
+	int result;
+	result = ehci_bus_suspend(hcd);
+	if (!result)
+	{
+		PNX833X_USB_PORTSC1=0x38800000;
+	}
+	return result;
+}
+
+static int ehci_pnx833x_bus_resume(struct usb_hcd *hcd)
+{
+	PNX833X_USB_PORTSC1=0x38001000;
+	return ehci_bus_resume(hcd);
+}
+
+#else
+
+#define ehci_pnx833x_bus_suspend NULL
+#define ehci_pnx833x_bus_resume NULL
+
+#endif
+
+/*-------------------------------------------------------------------------*/
+
+/* configure so an HC device and id are always provided */
+/* always called with process context; sleeping is OK */
+
+/**
+ * usb_ehci_pnx833x_probe - initialize pnx833x-based HCDs
+ * Context: !in_interrupt()
+ *
+ * Allocates basic resources for this USB host controller, and
+ * then invokes the start() method for the HCD associated with it
+ * through the hotplug entry's driver_data.
+ *
+ */
+int usb_ehci_pnx833x_probe(const struct hc_driver *driver,
+			  struct usb_hcd **hcd_out, struct platform_device *dev)
+{
+	int retval;
+	struct usb_hcd *hcd;
+	struct ehci_hcd *ehci;
+	volatile unsigned long * txfifotune = (volatile unsigned long*)0xB7E19164;
+	volatile unsigned long * usbcmd = (volatile unsigned long*)0xB7E19140;
+
+	if (dev->resource[1].flags != IORESOURCE_IRQ) {
+		pr_debug("resource[1] is not IORESOURCE_IRQ");
+		retval = -ENOMEM;
+	}
+	hcd = usb_create_hcd(driver, &dev->dev, "PNX833x");
+	if (!hcd)
+		return -ENOMEM;
+	hcd->rsrc_start = dev->resource[0].start;
+	hcd->rsrc_len = dev->resource[0].end - dev->resource[0].start + 1;
+
+	if (!request_mem_region((hcd->rsrc_start & 0x1fffffff), hcd->rsrc_len, hcd_name)) {
+		pr_debug("request_mem_region failed");
+		retval = -EBUSY;
+		goto err1;
+	}
+
+	hcd->regs = ioremap((hcd->rsrc_start & 0x1fffffff), hcd->rsrc_len) + 0x100;
+	if (!hcd->regs) {
+		pr_debug("ioremap failed");
+		retval = -ENOMEM;
+		goto err2;
+	}
+
+	pnx833x_start_ehc(dev);
+	retval = usb_hcd_pnx833x_make_hc(hcd);
+	if (retval)
+		return retval;
+
+	ehci = hcd_to_ehci(hcd);
+	ehci->caps = hcd->regs;
+	ehci->regs = hcd->regs + HC_LENGTH(ehci, readl(&ehci->caps->hc_capbase));
+
+	/* cache this readonly data; minimize chip reads */
+	ehci->hcs_params = readl(&ehci->caps->hcs_params);
+
+	retval = usb_add_hcd(hcd, dev->resource[1].start, 0);
+	*txfifotune = 0x100000;
+	*usbcmd = (*usbcmd & 0xFFFF) | 0x00000;
+	if (retval == 0)
+		return retval;
+
+	pnx833x_stop_ehc(dev);
+	iounmap(hcd->regs - 0x100);
+err2:
+	release_mem_region((hcd->rsrc_start & 0x1fffffff), hcd->rsrc_len);
+err1:
+	usb_put_hcd(hcd);
+	return retval;
+}
+
+/* may be called without controller electrically present */
+/* may be called with controller, bus, and devices active */
+
+/**
+ * usb_ehci_hcd_pnx833x_remove - shutdown processing for Au1xxx-based HCDs
+ * @dev: USB Host Controller being removed
+ * Context: !in_interrupt()
+ *
+ * Reverses the effect of usb_ehci_hcd_pnx833x_probe(), first invoking
+ * the HCD's stop() method.  It is always called from a thread
+ * context, normally "rmmod", "apmd", or something similar.
+ *
+ */
+void usb_ehci_pnx833x_remove(struct usb_hcd *hcd, struct platform_device *dev)
+{
+	usb_remove_hcd(hcd);
+	pnx833x_stop_ehc(dev);
+	iounmap(hcd->regs - 0x100);
+	release_mem_region((hcd->rsrc_start & 0x1fffffff), hcd->rsrc_len);
+	usb_put_hcd(hcd);
+}
+
+/*-------------------------------------------------------------------------*/
+
+static const struct hc_driver ehci_pnx833x_hc_driver = {
+	.description = hcd_name,
+	.product_desc = "PNX833x EHCI",
+	.hcd_priv_size = sizeof(struct ehci_hcd),
+
+	/*
+	 * generic hardware linkage
+	 */
+	.irq = ehci_irq,
+	.flags = HCD_MEMORY | HCD_DMA | HCD_USB2,
+
+	/*
+	 * basic lifecycle operations
+	 */
+	.reset = ehci_init,
+	.start = ehci_run,
+	.stop = ehci_stop,
+	.shutdown = ehci_shutdown,
+
+	/*
+	 * managing i/o requests and associated device resources
+	 */
+	.urb_enqueue = ehci_urb_enqueue,
+	.urb_dequeue = ehci_urb_dequeue,
+	.endpoint_disable = ehci_endpoint_disable,
+
+	/*
+	 * scheduling support
+	 */
+	.get_frame_number = ehci_get_frame,
+
+	/*
+	 * root hub support
+	 */
+	.hub_status_data = ehci_hub_status_data,
+	.hub_control = ehci_hub_control,
+	/*
+	 * power management
+	 */
+	.bus_suspend = ehci_pnx833x_bus_suspend,
+	.bus_resume = ehci_pnx833x_bus_resume,
+
+};
+
+/*-------------------------------------------------------------------------*/
+
+static int ehci_hcd_pnx833x_drv_probe(struct platform_device *pdev)
+{
+	struct usb_hcd *hcd = NULL;
+	int ret;
+
+	pr_debug("In ehci_hcd_pnx833x_drv_probe\n");
+
+	if (usb_disabled())
+		return -ENODEV;
+
+	ret = usb_ehci_pnx833x_probe(&ehci_pnx833x_hc_driver, &hcd, pdev);
+	return ret;
+}
+
+static int ehci_hcd_pnx833x_drv_remove(struct platform_device *pdev)
+{
+	struct usb_hcd *hcd = platform_get_drvdata(pdev);
+
+	usb_ehci_pnx833x_remove(hcd, pdev);
+	return 0;
+}
+
+MODULE_ALIAS("pnx833x-ehci");
+static struct platform_driver ehci_hcd_pnx833x_driver = {
+	.probe = ehci_hcd_pnx833x_drv_probe,
+	.remove = ehci_hcd_pnx833x_drv_remove,
+	.shutdown = usb_hcd_platform_shutdown,
+	.driver = {
+		.name = "pnx833x-ehci",
+		.bus = &platform_bus_type
+	}
+};
diff -Naur linux-5.11.orig/drivers/usb/host/Kconfig linux-5.11/drivers/usb/host/Kconfig
--- linux-5.11.orig/drivers/usb/host/Kconfig	2021-02-15 01:32:24.000000000 +0300
+++ linux-5.11/drivers/usb/host/Kconfig	2021-02-19 09:25:27.778499658 +0300
@@ -213,6 +213,13 @@
 	help
 	  Variation of ARC USB block used in some Freescale chips.
 
+config USB_EHCI_PNX833X
+	tristate "Support for PNX833X on-chip EHCI USB controller"
+	depends on SOC_PNX833X
+	select USB_EHCI_ROOT_HUB_TT
+	help
+	  Variation of USB block used in some PNX chips.
+
 config USB_EHCI_HCD_NPCM7XX
 	tristate "Support for Nuvoton NPCM7XX on-chip EHCI USB controller"
 	depends on (USB_EHCI_HCD && ARCH_NPCM7XX) || COMPILE_TEST
